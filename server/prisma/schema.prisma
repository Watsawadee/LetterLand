generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  email            String            @unique
  password         String
  age              Int
  englishLevel     EnglishLevel
  coin             Int               @default(0)
  hint             Int               @default(3)
  created_at       DateTime          @default(now())
  total_playtime   Int               @default(0)
  games            Game[]
  gameTemplate     GameTemplate[]
  userAchievements UserAchievement[]
  wordFound        WordFound[]
  extraWordFound   ExtraWordFound[]
}

model Achievement {
  id               Int               @id @default(autoincrement())
  name             String
  description      String
  coinReward       Int
  imageUrl         String?
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  userId        Int
  achievementId Int
  isCompleted   Boolean     @default(false)
  earnedAt      DateTime    @default(now())
  isClaimed     Boolean     @default(false)
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model GameTemplate {
  id         Int                    @id @default(autoincrement())
  gameTopic  String
  gameType   GameType
  difficulty EnglishLevel
  isPublic   Boolean                @default(false)
  imageUrl   String?
  ownerId    Int
  gameCode   String?                @unique
  games      Game[]
  owner      User                   @relation(fields: [ownerId], references: [id])
  questions  GameTemplateQuestion[]
}

model Game {
  id             Int              @id @default(autoincrement())
  userId         Int
  gameTemplateId Int
  startedAt      DateTime         @default(now())
  finishedAt     DateTime?
  isHintUsed     Boolean          @default(false)
  isFinished     Boolean          @default(false)
  timer          Int?
  gameTemplate   GameTemplate     @relation(fields: [gameTemplateId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  wordFound      WordFound[]
  extraWordFound ExtraWordFound[]
}

model GameTemplateQuestion {
  id             Int @id @default(autoincrement())
  gameTemplateId Int
  questionId     Int

  gameTemplate GameTemplate @relation(fields: [gameTemplateId], references: [id], onDelete: Cascade)
  question     Question     @relation(fields: [questionId], references: [id], onDelete: Restrict)

  @@unique([gameTemplateId, questionId])
  @@index([questionId])
  @@index([gameTemplateId])
}

model Question {
  id                    Int                    @id @default(autoincrement())
  name                  String
  answer                String
  hint                  String
  audioUrl              String?
  wordFound             WordFound[]
  gameTemplateQuestions GameTemplateQuestion[]
}

model WordFound {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  word       String
  foundAt    DateTime @default(now())
  gameId     Int
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([gameId, userId, questionId])
  @@index([gameId, userId, foundAt])
}

model ExtraWordFound {
  id       Int      @id @default(autoincrement())
  userId   Int
  word     String
  foundAt  DateTime @default(now())
  gameId   Int
  audioUrl String?

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([gameId, userId, word])
  @@index([gameId, userId, foundAt])
}

enum EnglishLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum GameType {
  WORD_SEARCH
  CROSSWORD_SEARCH
}
