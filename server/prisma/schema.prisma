generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  email            String            @unique
  password         String
  age              Int
  englishLevel     EnglishLevel
  coin             Int               @default(0)
  hint             Int               @default(3)
  created_at       DateTime          @default(now())
  total_playtime   Int               @default(0)
  games            Game[]
  userAchievements UserAchievement[]
  wordFound        WordFound[]
}

model Achievement {
  id               Int               @id @default(autoincrement())
  name             String
  description      String
  coinReward       Int
  imageUrl         String?
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  userId        Int
  achievementId Int
  isCompleted   Boolean     @default(false)
  earnedAt      DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model GameTemplate {
  id         Int          @id @default(autoincrement())
  gameTopic  String
  gameType   GameType
  difficulty EnglishLevel
  isPublic   Boolean      @default(false)
  imageUrl   String?
  games      Game[]
  questions  Question[]
}

model Game {
  id             Int          @id @default(autoincrement())
  userId         Int
  gameTemplateId Int
  startedAt      DateTime     @default(now())
  finishedAt     DateTime?
  isHintUsed     Boolean      @default(false)
  isFinished     Boolean      @default(false)
  gameCode       String?      @unique
  timer          Int?
  gameTemplate   GameTemplate @relation(fields: [gameTemplateId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  WordFound      WordFound[]
}

model Question {
  id             Int          @id @default(autoincrement())
  gameTemplateId Int
  name           String
  answer         String
  hint           String
  audioUrl       String?
  gameTemplate   GameTemplate @relation(fields: [gameTemplateId], references: [id])
  wordFound      WordFound[]
}

model WordFound {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  word       String
  foundAt    DateTime @default(now())
  gameId     Int
  Game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

enum EnglishLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum GameType {
  WORD_SEARCH
  CROSSWORD_SEARCH
}
